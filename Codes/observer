# example of class using a observer pattern.

class Subject:
    def __init__(self):
        self._observers = []
    def attach(self, observer):
        if observer not in self._observers:
            self._observers.append(observer)
    def detach(self, observer):
        try:
            self._observers.remove(observer)
        except ValueError:
            pass
    def notify(self, modifier=None):
        for observer in self._observers:
            if modifier != observer:
                observer.update(self)

class Data(Subject):
    def __init__(self, name=''):
        Subject.__init__(self)
        self.name = name
        self._data = 0
    @property
    def data(self):
        return self._data
    @data.setter
    def data(self, value):
        self._data = value
        self.notify()

class HexViewer:
    def update(self, subject):
        print('HexViewer: Subject %s has data 0x%x' % (subject.name, subject.data))

class DecimalViewer:
    def update(self, subject):
        print('DecimalViewer: Subject %s has data %d' % (subject.name, subject.data))

if __name__ == '__main__':

    data1 = Data('Data 1')
    view1 = DecimalViewer()
    view2 = HexViewer()

    data1.attach(view1)
    data1.attach(view2)

    print('Setting data = 10')
    data1.data = 10

    print('Setting data = 3')
    data1.data = 3

    print('Detach HexViewer from data1 and attach DecimalViewer')
    data1.detach(view2)
    data1.attach(view1)

    print('Setting data = 5')
    data1.data = 5

    print('Setting data = 10')
    data1.data = 10

    """
    Output:
    Setting data = 10
    DecimalViewer: Subject Data 1 has data 10
    HexViewer: Subject Data 1 has data 0xa
    Setting data = 3
    DecimalViewer: Subject Data 1 has data 3
    HexViewer: Subject Data 1 has data 0x3
    Detach HexViewer from data1 and attach DecimalViewer
    DecimalViewer: Subject Data 1 has data 3
    Setting data = 5
    DecimalViewer: Subject Data 1 has data 5
    Setting data = 10
    DecimalViewer: Subject Data 1 has data 10
    """
    

